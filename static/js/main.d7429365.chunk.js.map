{"version":3,"sources":["config/firebase.jsx","components/Login.jsx","components/Home.jsx","App.jsx","serviceWorker.js","index.js"],"names":["fire","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","Login","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handlChange","e","setState","defineProperty","target","type","value","login","preventDefault","auth","signInWithEmailAndPassword","state","email","password","then","u","catch","err","console","log","error","message","signUp","createUserWithEmailAndPassword","bind","assertThisInitialized","react_default","a","createElement","className","onChange","id","aria-describedby","placeholder","required","onClick","Component","Home","logout","signOut","App","user","authListner","_this2","onAuthStateChanged","localStorage","setItem","uid","removeItem","src_components_Home","src_components_Login","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d7429365.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\n\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyA9N3vgipRQV9NmOXpoPqa701i52f0-Pp0\",\r\n    authDomain: \"durable-jet-230615.firebaseapp.com\",\r\n    databaseURL: \"https://durable-jet-230615.firebaseio.com\",\r\n    projectId: \"durable-jet-230615\",\r\n    storageBucket: \"durable-jet-230615.appspot.com\",\r\n    messagingSenderId: \"481330006243\"\r\n  };\r\nconst fire = firebase.initializeApp(config);\r\n\r\nexport default fire;","import React, { Component } from 'react';\r\nimport './Login.css';\r\nimport fire from '../config/firebase';\r\n\r\nclass Login extends Component {\r\n\r\n    constructor(props) {\r\n      super(props)\r\n    \r\n      this.state = {\r\n         email: '',\r\n         password: '',\r\n         error: null\r\n      }\r\n      this.handlChange = this.handlChange.bind(this);\r\n      this.login = this.login.bind(this);\r\n      this.signUp = this.signUp.bind(this);\r\n    }\r\n\r\n    handlChange = (e) => {\r\n        this.setState({\r\n            [e.target.type]: e.target.value\r\n        })\r\n    }\r\n    \r\n    login = (e) => {\r\n        e.preventDefault();\r\n        fire.auth().signInWithEmailAndPassword(this.state.email, this.state.password).then((u) => {\r\n\r\n        }).catch((err) => {\r\n            console.log(err)\r\n            this.setState({ error: err.message })\r\n        })\r\n    }\r\n\r\n    signUp = (e) => {\r\n        e.preventDefault();\r\n        fire.auth().createUserWithEmailAndPassword(this.state.email, this.state.password)\r\n        .catch((err) => {\r\n            console.log(err)\r\n            this.setState({ error: err.message })\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container-login\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-6 bg-cover\">\r\n                       \r\n                    </div>\r\n                    <div className=\"col-6 side-login\">\r\n                        <form className=\"login-box\">\r\n                        <div className={(this.state.error ? 'error-msg' : null)}>{this.state.error}</div>\r\n                        <div className=\"form-group\">\r\n                            <label>Email address</label>\r\n                            <input value={this.state.email} onChange={this.handlChange} type=\"email\" className=\"form-control\" id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\" placeholder=\"Enter email\" required={true}/>\r\n                            <small id=\"emailHelp\" className=\"form-text text-muted\">We'll never share your email with anyone else.</small>\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label>Password</label>\r\n                            <input value={this.state.password} onChange={this.handlChange} type=\"password\" className=\"form-control\" id=\"exampleInputPassword1\" placeholder=\"Password\" required={true}/>\r\n                        </div>\r\n                        <button onClick={this.login} type=\"submit\" className=\"btn btn-info\">Login</button>\r\n                        <button onClick={this.signUp} className=\"btn btn-success btnside\">Signup</button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Login;","import React, { Component } from 'react';\r\nimport fire from '../config/firebase';\r\nimport './Home.css';\r\n\r\nclass Home extends Component {\r\n\r\n    constructor(props) {\r\n       super(props)\r\n      this.logout = this.logout.bind(this);\r\n    }\r\n\r\n    logout = () => {\r\n        fire.auth().signOut();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container-cover\">\r\n               <div><h1>Welcome</h1></div>\r\n               <div>\r\n                 <button onClick={this.logout} className=\"btn btn-info btn-lg\">Logout</button>\r\n               </div>\r\n            </div>\r\n        );\r\n }\r\n}\r\n\r\nexport default Home;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport fire from './config/firebase';\r\n\r\nimport Login from './components/Login';\r\nimport Home from './components/Home';\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n  \r\n    this.state = {\r\n       user: {},\r\n    }\r\n  }\r\n\r\n  // email - test@gmail.com\r\n  // pass - test1234\r\n\r\n  componentDidMount() {\r\n    this.authListner();\r\n  }  \r\n\r\n  authListner() {\r\n    fire.auth().onAuthStateChanged((user) => {\r\n      // console.log(user);\r\n      if (user) {\r\n        this.setState({ user });\r\n        localStorage.setItem('user', user.uid);\r\n      } else {\r\n        this.setState({ user: null });\r\n        localStorage.removeItem('user');\r\n      }\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div>\r\n        {this.state.user ? (<Home/>) : (<Login />)}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App.jsx';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}